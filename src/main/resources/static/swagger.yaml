swagger: '2.0'
info:
  description: This the InnoEdu api.
  version: 1.0.0
  title: InnoEdu Api
  contact:
    email: apiteam@inno.edu
host: inno-edu-api.herokuapp.com
basePath: /api
tags:
  - name: auth
    description: Login management
  - name: users
    description: User management
  - name: schools
    description: School management
  - name: profiles
    description: Profile management
  - name: profile-associations
    description: Profile association management
  - name: availability
    description: Mentor avaialbility management
  - name: appointments
    description: Appointment management
  - name: feedbacks
    description: Apointment feedbacks
responses:
  400:
    description: Bad request, additional info provided in the response body
    schema:
      $ref: '#/definitions/VndErrors'
  401:
    description: Unauthorized
    schema:
      $ref: '#/definitions/VndErrors'
  403:
    description: Forbidden, access is denied
  500:
    description: Internal Server Error
securityDefinitions:
  forwarded:
    name: authorization
    type: apiKey
    in: header
schemes:
  - https
  - http
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Sign in using the user crendentials
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the credentials
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: User authenticated
          schema:
            $ref: '#/definitions/LoginResponse'
          headers:
            Authorization:
              type: string
              description: Authorization token
        '401':
          $ref: '#/responses/401'
  /users:
    get:
      tags:
        - users
      summary: Get all users
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedUserResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - users
      summary: Add a new user and also return the login token
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the user information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
      responses:
        '200':
          description: New user successfully created
          schema:
            $ref: '#/definitions/LoginResponse'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by id
      parameters:
        - in: path
          name: id
          description: User id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResource'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - users
      summary: Update user by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: User id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the user information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateUserRequest'
      responses:
        '201':
          description: User successfully updated
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - users
      summary: Delete user by id
      parameters:
        - in: path
          name: id
          description: User id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: User successfully removed
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /users/{id}/profile:
    get:
      tags:
        - users
      summary: Get a profile by user id
      parameters:
        - in: path
          name: id
          description: User id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProfileResource'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /schools:
    get:
      tags:
        - schools
      summary: Get all schools
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedSchoolResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - schools
      summary: Add a new school
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the school information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateSchoolRequest'
      responses:
        '201':
          description: New school successfully created
          schema:
            $ref: '#/definitions/School'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /schools/{id}:
    get:
      tags:
        - schools
      summary: Get school by id
      parameters:
        - in: path
          name: id
          description: School id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SchoolResource'
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - schools
      summary: Update school by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: School id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the school information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateSchoolRequest'
      responses:
        '201':
          description: School successfully updated
          schema:
            $ref: '#/definitions/School'
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - schools
      summary: Delete school by id
      parameters:
        - in: path
          name: id
          description: School id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: School successfully removed
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /schools/{id}/mentors:
    get:
      tags:
        - schools
      summary: Get school mentor profiles
      parameters:
        - in: path
          name: id
          description: School id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedProfileResourceList'
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles:
    get:
      tags:
        - profiles
      summary: Get all profiles
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedProfileResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - profiles
      summary: Add a new profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the profile information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateProfileRequest'
      responses:
        '201':
          description: New profile successfully created
          schema:
            $ref: '#/definitions/Profile'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}:
    get:
      tags:
        - profiles
      summary: Get profile by id
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProfileResource'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - profiles
      summary: Update profile by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the profile information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateProfileRequest'
      responses:
        '201':
          description: Profile successfully updated
          schema:
            $ref: '#/definitions/Profile'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - profiles
      summary: Delete profile by id
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Profile successfully removed
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}/associate:
    put:
      tags:
        - profile-associations
      summary: Associate a profile to a school
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the school information to be associated
          required: true
          schema:
            $ref: '#/definitions/ProfileAssociationRequest'
      responses:
        '200':
          description: Profile successfully associated
          schema:
            $ref: '#/definitions/Profile'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /availability:
    get:
      tags:
        - availability
      summary: Get all availability
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAvailabilityResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - availability
      summary: Add a new availability
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the availability information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateAvailabilityRequest'
      responses:
        '201':
          description: New availability successfully created
          schema:
            $ref: '#/definitions/Availability'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /availability/{id}:
    get:
      tags:
        - availability
      summary: Get availability by id
      parameters:
        - in: path
          name: id
          description: Availability id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AvailabilityResource'
        '404':
          description: Availability not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - availability
      summary: Update availability by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Availability id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the availability information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateAvailabilityRequest'
      responses:
        '201':
          description: Availability successfully updated
          schema:
            $ref: '#/definitions/Availability'
        '404':
          description: Availability not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - availability
      summary: Delete availability by id
      parameters:
        - in: path
          name: id
          description: Availability id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Availability successfully removed
        '404':
          description: Availability not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /availability/profile/{profileId}:
    get:
      tags:
        - availability
      summary: Get availability for a profile
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAvailabilityResourceList'
        '403':
          $ref: '#/responses/403'
  /appointments:
    get:
      tags:
        - appointments
      summary: Get all appointments
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAppointmentResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - appointments
      summary: Add a new appointment
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the appointment information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateAppointmentRequest'
      responses:
        '201':
          description: New appointment successfully created
          schema:
            $ref: '#/definitions/Appointment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /appointments/estimate:
    get:
      tags:
        - appointments
      summary: Estimate an appointment fee
      produces:
        - application/hal+json
      parameters:
        - in: query
          name: mentorProfileId
          type: string
          description: Mentor profile id with the hourly rate
          required: true
          format: uuid
        - in: query
          name: fromDateTime
          type: string
          format: date-time
          description: Appointment start date time
          required: true
        - in: query
          name: toDateTime
          type: string
          format: date-time
          description: Appointment end date time
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EstimationResource'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /appointments/{id}:
    get:
      tags:
        - appointments
      summary: Get appointment by id
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AppointmentResource'
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - appointments
      summary: Update appointment by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the appointment information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateAppointmentRequest'
      responses:
        '201':
          description: Appointment successfully updated
          schema:
            $ref: '#/definitions/Appointment'
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - appointments
      summary: Delete appointment by id
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Appointment successfully removed
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/mentor/{profileId}:
    get:
      tags:
        - appointments
      summary: Get all appointments by mentor profile and status
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: profileId
          description: Mentor Profile id
          required: true
          type: string
          format: uuid
        - in: query
          name: status
          description: Appointment status
          required: false
          type: string
          enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAppointmentResourceList'
        '404':
          description: Mentor not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/mentee/{profileId}:
    get:
      tags:
        - appointments
      summary: Get all appointments by mentee profile and status
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: query
          name: status
          description: Appointment status
          required: false
          type: string
          enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAppointmentResourceList'
        '404':
          description: Mentor not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/{id}/cancel:
    put:
      tags:
        - appointments
      summary: Cancel appointment by id
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
        - in: body
          name: reason
          description: Reason for canceling the appointment
          required: true
          schema:
            $ref: '#/definitions/AppointmentReason'
      responses:
        '204':
          description: Appointment canceled
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          description: Reason not provided
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/{id}/decline:
    put:
      tags:
        - appointments
      summary: Decline appointment by id
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
        - in: body
          name: reason
          description: Reason for declining the appointment
          required: true
          schema:
            $ref: '#/definitions/AppointmentReason'
      responses:
        '204':
          description: Appointment declined
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          description: Reason not provided
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/{id}/accept:
    put:
      tags:
        - appointments
      summary: Accept appointment by id
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Appointment accepted
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/{id}/feedbacks:
    get:
      tags:
        - feedbacks
      summary: Get all feedbacks for appointment
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedFeedbackResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - feedbacks
      summary: Add a feedback for the appointment
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the feedback information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateFeedbackRequest'
      responses:
        '201':
          description: New appointment successfully created
          schema:
            $ref: '#/definitions/Feedback'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /appointments/feedbacks/{id}:
    get:
      tags:
        - feedbacks
      summary: Get feedback by id
      parameters:
        - in: path
          name: id
          description: Feedback id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FeedbackResource'
        '404':
          description: Feedback not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - feedbacks
      summary: Delete feedback by id
      parameters:
        - in: path
          name: id
          description: Feedback id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Feedback successfully removed
        '404':
          description: Feedback not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
definitions:
  VndError:
    type: object
    properties:
      logref:
        type: string
      message:
        type: string
      links:
        type: array
        items:
          type: object
  VndErrors:
    type: array
    items:
      $ref: '#/definitions/VndError'
  LoginRequest:
    type: object
    properties:
      username:
        type: string
        maxLength: 30
      password:
        type: string
        maxLength: 30
    required:
      - username
      - password
  LoginResponse:
    type: object
    properties:
      user:
          $ref: '#/definitions/User'
      token:
        type: string
  CreateUserRequest:
    type: object
    properties:
      firstName:
        type: string
        maxLength: 50
      lastName:
        type: string
        maxLength: 50
      username:
        type: string
        maxLength: 30
      email:
        type: string
        maxLength: 255
      password:
        type: string
        maxLength: 30
      confirmPassword:
        type: string
        maxLength: 30
    required:
      - firstName
      - lastName
      - username
      - email
      - password
      - confirmPassword
  UpdateUserRequest:
    type: object
    properties:
      firstName:
        type: string
        maxLength: 50
      lastName:
        type: string
        maxLength: 50
      email:
        type: string
        maxLength: 255
    required:
      - firstName
      - lastName
      - email
  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
      firstName:
        type: string
        maxLength: 50
      lastName:
        type: string
        maxLength: 50
      username:
        type: string
        maxLength: 30
      email:
        type: string
        maxLength: 255
  UserResource:
    allOf:
        - $ref: '#/definitions/User'
        - type: object
          properties:
            _links:
              type: object
  UserResourceList:
    type: object
    properties:
      userResourceList:
        type: array
        items:
          $ref: '#/definitions/UserResource'
  EmbeddedUserResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/UserResourceList'
      _links:
        type: object
  CreateSchoolRequest:
    type: object
    properties:
      name:
        type: string
        maxLength: 255
      description:
        type: string
    required:
      - name
      - description
  UpdateSchoolRequest:
    type: object
    properties:
      name:
        type: string
        maxLength: 255
      description:
        type: string
    required:
      - name
      - description
  School:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        maxLength: 255
      description:
        type: string
  SchoolResource:
    allOf:
        - $ref: '#/definitions/School'
        - type: object
          properties:
            _links:
              type: object
  SchoolResourceList:
    type: object
    properties:
      schoolResourceList:
        type: array
        items:
          $ref: '#/definitions/SchoolResource'
  EmbeddedSchoolResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/SchoolResourceList'
      _links:
        type: object
  CreateProfileRequest:
    type: object
    properties:
      userId:
        type: string
        format: uuid
      description:
        type: string
    required:
      - userId
      - description
  UpdateProfileRequest:
    type: object
    properties:
      description:
        type: string
    required:
      - description
  ProfileAssociationRequest:
    type: object
    properties:
      schoolId:
        type: string
    required:
      - schoolId
  Profile:
    type: object
    properties:
      id:
        type: string
        format: uuid
      userId:
        type: string
        format: uuid
      schoolId:
        type: string
        format: uuid
      description:
        type: string
      rate:
        type: number
      status:
        type: string
        enum: [CREATED, ACTIVE, INACTIVE, REJECTED]
  ProfileResource:
      allOf:
        - $ref: '#/definitions/Profile'
        - type: object
          properties:
            _links:
              type: object
  ProfileResourceList:
    type: object
    properties:
      profileResourceList:
        type: array
        items:
          $ref: '#/definitions/ProfileResource'
  EmbeddedProfileResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/ProfileResourceList'
      _links:
        type: object
  CreateAvailabilityRequest:
    type: object
    properties:
      mentorProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
    required:
      - mentorProfileId
      - fromDateTime
      - toDateTime
  UpdateAvailabilityRequest:
    type: object
    properties:
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
    required:
      - fromDateTime
      - toDateTime
  Availability:
    type: object
    properties:
      id:
        type: string
        format: uuid
      mentorProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
  AvailabilityResource:
    allOf:
        - $ref: '#/definitions/Availability'
        - type: object
          properties:
            _links:
              type: object
  AvailabilityResourceList:
    type: object
    properties:
      availabilityResourceList:
        type: array
        items:
          $ref: '#/definitions/AvailabilityResource'
  EmbeddedAvailabilityResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/AvailabilityResourceList'
      _links:
        type: object
  CreateAppointmentRequest:
    type: object
    properties:
      mentorProfileId:
        type: string
        format: uuid
      menteeProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
      description:
        type: string
    required:
      - mentorProfileId
      - menteeProfileId
      - fromDateTime
      - toDateTime
      - description
  UpdateAppointmentRequest:
    type: object
    properties:
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
      description:
        type: string
    required:
      - fromDateTime
      - toDateTime
      - description
  Appointment:
    type: object
    properties:
      id:
        type: string
        format: uuid
      mentorProfileId:
        type: string
        format: uuid
      menteeProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
      description:
        type: string
      fee:
        type: number
      status:
        type: string
        enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED]
      reason:
        type: string
  AppointmentReason:
    type: object
    properties:
      reason:
        type: string
        maxLength: 255
  AppointmentResource:
    allOf:
        - $ref: '#/definitions/Appointment'
        - type: object
          properties:
            _links:
              type: object
  AppointmentResourceList:
    type: object
    properties:
      appointmentResourceList:
        type: array
        items:
          $ref: '#/definitions/AppointmentResource'
  EmbeddedAppointmentResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/AppointmentResourceList'
      _links:
        type: object
  EstimationResource:
    type: object
    properties:
      fee:
        type: number
  CreateFeedbackRequest:
    type: object
    properties:
      source:
        type: string
        enum: [MENTEE, MENTOR]
      rating:
        type: number
        minimum: 0
        maximum: 5
      description:
        type: string
    required:
      - source
      - rating
      - description
  Feedback:
    type: object
    properties:
      id:
        type: string
        format: uuid
      appointmentId:
        type: string
        format: uuid
      source:
        type: string
        enum: [MENTEE, MENTOR]
      rating:
        type: number
      description:
        type: string
  FeedbackResource:
    allOf:
        - $ref: '#/definitions/Feedback'
        - type: object
          properties:
            _links:
              type: object
  FeedbackResourceList:
    type: object
    properties:
      feedbackResourceList:
        type: array
        items:
          $ref: '#/definitions/FeedbackResource'
  EmbeddedFeedbackResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/FeedbackResourceList'
      _links:
        type: object