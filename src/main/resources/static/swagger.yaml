swagger: '2.0'
info:
  description: This the InnoEdu api.
  version: 1.0.0
  title: InnoEdu Api
  contact:
    email: apiteam@inno.edu
host: inno-edu-api.herokuapp.com
basePath: /api
tags:
  - name: auth
    description: Login management
  - name: users
    description: User management
  - name: schools
    description: School management
  - name: school-attachments
    description: School attachment management
  - name: profiles
    description: Profile management
  - name: profile-attachments
    description: Profile attachment management
  - name: profile-skills
    description: Profile skills management
  - name: profile-associations
    description: Profile association management
  - name: profile-experiences
    description: Profile experience management
  - name: profile-interests
    description: Profile interest management
  - name: profile-accomplishments
    description: Profile accomplishment management
  - name: profile-services
    description: Profile service management
  - name: availability
    description: Mentor avaialbility management
  - name: appointments
    description: Appointment management
  - name: feedbacks
    description: Apointment feedbacks
  - name: attachments
    description: Attachment management
  - name: skills
    description: Skill management
responses:
  400:
    description: Bad request, additional info provided in the response body
    schema:
      $ref: '#/definitions/VndErrors'
  401:
    description: Unauthorized
    schema:
      $ref: '#/definitions/VndErrors'
  403:
    description: Forbidden, access is denied
  500:
    description: Internal Server Error
securityDefinitions:
  bearer:
    name: Authorization
    type: apiKey
    in: header
schemes:
  - https
  - http
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Sign in using the user crendentials
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the credentials
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: User authenticated
          schema:
            $ref: '#/definitions/LoginResponse'
          headers:
            Authorization:
              type: string
              description: Authorization token
        '401':
          $ref: '#/responses/401'
  /users:
    get:
      tags:
        - users
      summary: Get all users
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedUserResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - users
      summary: Add a new user and also return the login token
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the user information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
      responses:
        '200':
          description: New user successfully created
          schema:
            $ref: '#/definitions/LoginResponse'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by id
      parameters:
        - in: path
          name: id
          description: User id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResource'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - users
      summary: Update user by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: User id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the user information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateUserRequest'
      responses:
        '201':
          description: User successfully updated
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - users
      summary: Delete user by id
      parameters:
        - in: path
          name: id
          description: User id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: User successfully removed
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /users/{id}/profile:
    get:
      tags:
        - users
      summary: Get a profile by user id
      parameters:
        - in: path
          name: id
          description: User id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProfileResource'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /schools:
    get:
      tags:
        - schools
      summary: Get all schools
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedSchoolResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - schools
      summary: Add a new school
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the school information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateSchoolRequest'
      responses:
        '201':
          description: New school successfully created
          schema:
            $ref: '#/definitions/School'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /schools/{id}:
    get:
      tags:
        - schools
      summary: Get school by id
      parameters:
        - in: path
          name: id
          description: School id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SchoolResource'
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - schools
      summary: Update school by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: School id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the school information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateSchoolRequest'
      responses:
        '201':
          description: School successfully updated
          schema:
            $ref: '#/definitions/School'
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - schools
      summary: Delete school by id
      parameters:
        - in: path
          name: id
          description: School id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: School successfully removed
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /schools/{id}/mentors:
    get:
      tags:
        - schools
      summary: Get school mentor profiles
      parameters:
        - in: path
          name: id
          description: School id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedProfileProjectionResourceList'
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /schools/{schoolId}/attachments:
    get:
      tags:
        - school-attachments
      summary: Get school attachments
      parameters:
        - in: path
          name: schoolId
          description: School id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAttachmentResourceList'
        '404':
          description: School not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - school-attachments
      summary: Add a new attachment for school
      consumes:
        - multipart/form-data
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: schoolId
          type: string
          format: uuid
          required: true
        - in: query
          name: description
          type: string
          required: true
        - in: formData
          name: file
          type: file
          required: true
      responses:
        '201':
          description: New attachment successfully created
          schema:
            $ref: '#/definitions/Attachment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /schools/{schoolId}/attachments/{id}:
    delete:
      tags:
        - school-attachments
      summary: Delete attachment by school id and id
      parameters:
        - in: path
          name: schoolId
          description: School id
          required: true
          type: string
          format: uuid
        - in: path
          name: id
          description: Attachment id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Attachment successfully removed
        '404':
          description: Attachment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /schools/{schoolId}/upload-photo:
    post:
      tags:
        - school-attachments
      summary: Upload an attachment to be used as the school photo
      consumes:
        - multipart/form-data
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: schoolId
          type: string
          format: uuid
          required: true
        - in: formData
          name: file
          type: file
          required: true
      responses:
        '201':
          description: New attachment successfully created
          schema:
            $ref: '#/definitions/Attachment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles:
    get:
      tags:
        - profiles
      summary: Get all profiles
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedProfileResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - profiles
      summary: Add a new profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the profile information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateProfileRequest'
      responses:
        '201':
          description: New profile successfully created
          schema:
            $ref: '#/definitions/Profile'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}:
    get:
      tags:
        - profiles
      summary: Get profile by id
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProfileProjectionResource'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - profiles
      summary: Update profile by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the profile information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateProfileRequest'
      responses:
        '201':
          description: Profile successfully updated
          schema:
            $ref: '#/definitions/Profile'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - profiles
      summary: Delete profile by id
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Profile successfully removed
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}/associations:
    get:
      tags:
        - profile-associations
      summary: Get profile associations by profile and status
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: query
          name: status
          description: Status
          required: false
          type: string
          enum: [PENDING, APPROVED, REJECTED]
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProfileAssociationResourceList'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}/associate:
    post:
      tags:
        - profile-associations
      summary: Associate a profile to a school
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the school information to be associated
          required: true
          schema:
            $ref: '#/definitions/ProfileAssociationRequest'
      responses:
        '200':
          description: Profile successfully associated
          schema:
            $ref: '#/definitions/Profile'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/associations/{id}/approve:
    put:
      tags:
        - profile-associations
      summary: Approve profile association
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile association id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the profile association information to be updated
          required: true
          schema:
            $ref: '#/definitions/ApproveProfileAssociationRequest'
      responses:
        '204':
          description: Profile association successfully approved
          schema:
            $ref: '#/definitions/Profile'
        '404':
          description: Profile association not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/associations/{id}/reject:
    put:
      tags:
        - profile-associations
      summary: Reject profile association
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile association id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the profile association information to be updated
          required: true
          schema:
            $ref: '#/definitions/RejectProfileAssociationRequest'
      responses:
        '204':
          description: Profile association successfully approved
          schema:
            $ref: '#/definitions/Profile'
        '404':
          description: Profile association not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}/experiences:
    get:
      tags:
        - profile-experiences
      summary: Get experiences by profile
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ExperienceResourceList'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - profile-experiences
      summary: Add a new experience for profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the experience information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateExperienceRequest'
      responses:
        '201':
          description: New experience successfully created
          schema:
            $ref: '#/definitions/Experience'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/experiences/{id}:
    get:
      tags:
        - profile-experiences
      summary: Get experience by id
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ExperienceResource'
        '404':
          description: Experience not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - profile-experiences
      summary: Update experience for profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Experience id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the experience information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateExperienceRequest'
      responses:
        '201':
          description: Experience successfully updated
          schema:
            $ref: '#/definitions/Experience'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - profile-experiences
      summary: Delete experience by id
      parameters:
        - in: path
          name: id
          description: Experience id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Experience successfully removed
        '404':
          description: Experience not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}/interests:
    get:
      tags:
        - profile-interests
      summary: Get interests by profile
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InterestResourceList'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - profile-interests
      summary: Add a new interest for profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the interest information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateInterestRequest'
      responses:
        '201':
          description: New interest successfully created
          schema:
            $ref: '#/definitions/Interest'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/interests/{id}:
    get:
      tags:
        - profile-interests
      summary: Get interest by id
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InterestResource'
        '404':
          description: Interest not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - profile-interests
      summary: Update interest for profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Interest id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the interest information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateInterestRequest'
      responses:
        '201':
          description: Interest successfully updated
          schema:
            $ref: '#/definitions/Interest'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - profile-interests
      summary: Delete interest by id
      parameters:
        - in: path
          name: id
          description: Interest id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Interest successfully removed
        '404':
          description: Interest not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}/accomplishments:
    get:
      tags:
        - profile-accomplishments
      summary: Get accomplishments by profile
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AccomplishmentResourceList'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - profile-accomplishments
      summary: Add a new accomplishment for profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the accomplishment information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateAccomplishmentRequest'
      responses:
        '201':
          description: New accomplishment successfully created
          schema:
            $ref: '#/definitions/Accomplishment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/accomplishments/{id}:
    get:
      tags:
        - profile-accomplishments
      summary: Get accomplishment by id
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AccomplishmentResource'
        '404':
          description: Accomplishment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - profile-accomplishments
      summary: Update accomplishment for profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Accomplishment id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the accomplishment information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateAccomplishmentRequest'
      responses:
        '201':
          description: Accomplishment successfully updated
          schema:
            $ref: '#/definitions/Accomplishment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - profile-accomplishments
      summary: Delete accomplishment by id
      parameters:
        - in: path
          name: id
          description: Accomplishment id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Accomplishment successfully removed
        '404':
          description: Accomplishment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{id}/services:
    get:
      tags:
        - profile-services
      summary: Get services by profile
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ServiceResourceList'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - profile-services
      summary: Add a new service for profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the service information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateServiceRequest'
      responses:
        '201':
          description: New service successfully created
          schema:
            $ref: '#/definitions/Service'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/services/{id}:
    get:
      tags:
        - profile-services
      summary: Get service by id
      parameters:
        - in: path
          name: id
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ServiceResource'
        '404':
          description: Service not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - profile-services
      summary: Update service for profile
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Service id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the service information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateServiceRequest'
      responses:
        '201':
          description: Service successfully updated
          schema:
            $ref: '#/definitions/Service'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - profile-services
      summary: Delete service by id
      parameters:
        - in: path
          name: id
          description: Service id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Service successfully removed
        '404':
          description: Service not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{profileId}/upload-photo:
    post:
      tags:
        - profile-attachments
      summary: Upload an attachment to be used as the profile photo
      consumes:
        - multipart/form-data
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: profileId
          type: string
          format: uuid
          required: true
        - in: formData
          name: file
          type: file
          required: true
      responses:
        '201':
          description: New attachment successfully created
          schema:
            $ref: '#/definitions/Attachment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/{profileId}/attachments:
    get:
      tags:
        - profile-attachments
      summary: Get profile attachments
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAttachmentResourceList'
        '404':
          description: Attachment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - profile-attachments
      summary: Add a new attachment for profile
      consumes:
        - multipart/form-data
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: profileId
          type: string
          format: uuid
          required: true
        - in: query
          name: description
          type: string
          required: true
        - in: formData
          name: file
          type: file
          required: true
      responses:
        '201':
          description: New attachment successfully created
          schema:
            $ref: '#/definitions/Attachment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /profiles/{profileId}/attachments/{id}:
    delete:
      tags:
        - profile-attachments
      summary: Delete attachment by profile id and attachment id
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: path
          name: id
          description: Attachment id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Attachment successfully removed
        '404':
          description: Attachment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{profileId}/skills:
    get:
      tags:
        - profile-skills
      summary: Get profile skills
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedSkillResourceList'
        '404':
          description: Skill not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /profiles/{profileId}/skills/{id}:
    post:
      tags:
        - profile-skills
      summary: Add a new skill for profile
      consumes:
        - multipart/form-data
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: profileId
          type: string
          format: uuid
          required: true
        - in: path
          name: id
          type: string
          format: uuid
          required: true
      responses:
        '201':
          description: New profile skill successfully created
          schema:
            $ref: '#/definitions/ProfileSkillResource'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '404':
          description: Profile or Skill not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - profile-skills
      summary: Delete skill by profile id and skill id
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: path
          name: id
          description: Skill id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Skill successfully removed
        '404':
          description: Skill not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /availability:
    get:
      tags:
        - availability
      summary: Get all availability
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAvailabilityResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - availability
      summary: Add a new availability
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the availability information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateAvailabilityRequest'
      responses:
        '201':
          description: New availability successfully created
          schema:
            $ref: '#/definitions/Availability'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /availability/{id}:
    get:
      tags:
        - availability
      summary: Get availability by id
      parameters:
        - in: path
          name: id
          description: Availability id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AvailabilityResource'
        '404':
          description: Availability not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - availability
      summary: Update availability by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Availability id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the availability information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateAvailabilityRequest'
      responses:
        '201':
          description: Availability successfully updated
          schema:
            $ref: '#/definitions/Availability'
        '404':
          description: Availability not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - availability
      summary: Delete availability by id
      parameters:
        - in: path
          name: id
          description: Availability id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Availability successfully removed
        '404':
          description: Availability not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /availability/profile/{profileId}:
    get:
      tags:
        - availability
      summary: Get availability for a profile
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAvailabilityResourceList'
        '403':
          $ref: '#/responses/403'
  /appointments:
    get:
      tags:
        - appointments
      summary: Get all appointments
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAppointmentResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - appointments
      summary: Add a new appointment
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the appointment information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateAppointmentRequest'
      responses:
        '201':
          description: New appointment successfully created
          schema:
            $ref: '#/definitions/Appointment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /appointments/search:
    get:
      tags:
        - appointments
      summary: Search appointments
      produces:
        - application/hal+json
      parameters:
        - in: query
          name: status
          type: array
          items:
              type: string
              enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED, MISSED, COMPLETED, STARTED, UNAVAILABLE]
          description: List of status to search
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAppointmentResourceList'
        '403':
          $ref: '#/responses/403'
  /appointments/estimate:
    get:
      tags:
        - appointments
      summary: Estimate an appointment fee
      produces:
        - application/hal+json
      parameters:
        - in: query
          name: mentorProfileId
          type: string
          description: Mentor profile id with the hourly rate
          required: true
          format: uuid
        - in: query
          name: fromDateTime
          type: string
          format: date-time
          description: Appointment start date time
          required: true
        - in: query
          name: toDateTime
          type: string
          format: date-time
          description: Appointment end date time
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EstimationResource'
        '404':
          description: Profile not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /appointments/{id}:
    get:
      tags:
        - appointments
      summary: Get appointment by id
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AppointmentProjectionResource'
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - appointments
      summary: Update appointment by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the appointment information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateAppointmentRequest'
      responses:
        '201':
          description: Appointment successfully updated
          schema:
            $ref: '#/definitions/Appointment'
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - appointments
      summary: Delete appointment by id
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Appointment successfully removed
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/mentor/{profileId}:
    get:
      tags:
        - appointments
      summary: Get all appointments by mentor profile and status
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: profileId
          description: Mentor Profile id
          required: true
          type: string
          format: uuid
        - in: query
          name: status
          description: Appointment status
          required: false
          type: string
          enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED, MISSED, COMPLETED, STARTED, UNAVAILABLE]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAppointmentResourceList'
        '404':
          description: Mentor not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/mentee/{profileId}:
    get:
      tags:
        - appointments
      summary: Get all appointments by mentee profile and status
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
          format: uuid
        - in: query
          name: status
          description: Appointment status
          required: false
          type: string
          enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED, MISSED, COMPLETED, STARTED, UNAVAILABLE]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAppointmentResourceList'
        '404':
          description: Mentor not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/{id}/status:
    put:
      tags:
        - appointments
      summary: Change the appointment status
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the status information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateAppointmentStatusRequest'
      responses:
        '204':
          description: Appointment updated
        '404':
          description: Appointment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /appointments/{id}/feedbacks:
    get:
      tags:
        - feedbacks
      summary: Get all feedbacks for appointment
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedFeedbackResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - feedbacks
      summary: Add a feedback for the appointment
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Appointment id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the feedback information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateFeedbackRequest'
      responses:
        '201':
          description: New appointment successfully created
          schema:
            $ref: '#/definitions/Feedback'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /appointments/feedbacks/{id}:
    get:
      tags:
        - feedbacks
      summary: Get feedback by id
      parameters:
        - in: path
          name: id
          description: Feedback id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FeedbackResource'
        '404':
          description: Feedback not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - feedbacks
      summary: Delete feedback by id
      parameters:
        - in: path
          name: id
          description: Feedback id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Feedback successfully removed
        '404':
          description: Feedback not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /attachments:
    get:
      tags:
        - attachments
      summary: Get all attachments
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedAttachmentResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - attachments
      summary: Add a new attachment
      consumes:
        - multipart/form-data
      produces:
        - application/hal+json
      parameters:
        - in: query
          name: description
          required: true
          type: string
        - in: formData
          name: file
          required: true
          type: file
      responses:
        '201':
          description: New attachment successfully created
          schema:
            $ref: '#/definitions/Attachment'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /attachments/{id}:
    get:
      tags:
        - attachments
      summary: Get attachment by id
      parameters:
        - in: path
          name: id
          description: Attachment id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AttachmentResource'
        '404':
          description: Attachment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - attachments
      summary: Update attachment by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Attachment id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the attachment information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateAttachmentRequest'
      responses:
        '201':
          description: Attachment successfully updated
          schema:
            $ref: '#/definitions/Attachment'
        '404':
          description: Attachment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - attachments
      summary: Delete attachment by id
      parameters:
        - in: path
          name: id
          description: Attachment id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Attachment successfully removed
        '404':
          description: Attachment not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
  /skills:
    get:
      tags:
        - skills
      summary: Get all skills
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmbeddedSkillResourceList'
        '403':
          $ref: '#/responses/403'
    post:
      tags:
        - skills
      summary: Add a new skill
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: body
          name: request
          description: Request object with the skill information to be created
          required: true
          schema:
            $ref: '#/definitions/CreateSkillRequest'
      responses:
        '201':
          description: New skill successfully created
          schema:
            $ref: '#/definitions/Skill'
          headers:
            Location:
              type: string
              description: Link to the new resource created
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
  /skills/{id}:
    get:
      tags:
        - skills
      summary: Get skill by id
      parameters:
        - in: path
          name: id
          description: Skill id
          required: true
          type: string
          format: uuid
      produces:
        - application/hal+json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SkillResource'
        '404':
          description: Skill not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
    put:
      tags:
        - skills
      summary: Update skill by id
      consumes:
        - application/json
      produces:
        - application/hal+json
      parameters:
        - in: path
          name: id
          description: Skill id
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: Request object with the skill information to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateSkillRequest'
      responses:
        '201':
          description: Skill successfully updated
          schema:
            $ref: '#/definitions/Skill'
        '404':
          description: Skill not found
          schema:
            $ref: '#/definitions/VndErrors'
        '400':
          $ref: '#/responses/400'
        '403':
          $ref: '#/responses/403'
    delete:
      tags:
        - skills
      summary: Delete skill by id
      parameters:
        - in: path
          name: id
          description: Skill id
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Skill successfully removed
        '404':
          description: Skill not found
          schema:
            $ref: '#/definitions/VndErrors'
        '403':
          $ref: '#/responses/403'
definitions:
  VndError:
    type: object
    properties:
      logref:
        type: string
      message:
        type: string
      links:
        type: array
        items:
          type: object
  VndErrors:
    type: array
    items:
      $ref: '#/definitions/VndError'
  LoginRequest:
    type: object
    properties:
      username:
        type: string
        maxLength: 30
      password:
        type: string
        maxLength: 30
    required:
      - username
      - password
  LoginResponse:
    type: object
    properties:
      user:
          $ref: '#/definitions/User'
      token:
        type: string
  CreateUserRequest:
    type: object
    properties:
      firstName:
        type: string
        maxLength: 50
      lastName:
        type: string
        maxLength: 50
      username:
        type: string
        maxLength: 30
      email:
        type: string
        maxLength: 255
      password:
        type: string
        maxLength: 30
      confirmPassword:
        type: string
        maxLength: 30
      deviceId:
        type: string
        maxLength: 255
    required:
      - firstName
      - lastName
      - username
      - email
      - password
      - confirmPassword
  UpdateUserRequest:
    type: object
    properties:
      firstName:
        type: string
        maxLength: 50
      lastName:
        type: string
        maxLength: 50
      email:
        type: string
        maxLength: 255
      deviceId:
        type: string
        maxLength: 255
    required:
      - firstName
      - lastName
      - email
  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
      firstName:
        type: string
        maxLength: 50
      lastName:
        type: string
        maxLength: 50
      username:
        type: string
        maxLength: 30
      email:
        type: string
        maxLength: 255
      deviceId:
        type: string
        maxLength: 255
  UserResource:
    allOf:
        - $ref: '#/definitions/User'
        - type: object
          properties:
            _links:
              type: object
  UserResourceList:
    type: object
    properties:
      userResourceList:
        type: array
        items:
          $ref: '#/definitions/UserResource'
  EmbeddedUserResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/UserResourceList'
      _links:
        type: object
  CreateSchoolRequest:
    type: object
    properties:
      name:
        type: string
        maxLength: 255
      description:
        type: string
    required:
      - name
      - description
  UpdateSchoolRequest:
    type: object
    properties:
      name:
        type: string
        maxLength: 255
      description:
        type: string
    required:
      - name
      - description
  School:
    type: object
    properties:
      id:
        type: string
        format: uuid
      photoId:
        type: string
        format: uuid
      photo:
        type: object
        $ref: '#/definitions/Attachment'
      name:
        type: string
        maxLength: 255
      description:
        type: string
  SchoolResource:
    allOf:
        - $ref: '#/definitions/School'
        - type: object
          properties:
            _links:
              type: object
  SchoolResourceList:
    type: object
    properties:
      schoolResourceList:
        type: array
        items:
          $ref: '#/definitions/SchoolResource'
  EmbeddedSchoolResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/SchoolResourceList'
      _links:
        type: object
  CreateProfileRequest:
    type: object
    properties:
      userId:
        type: string
        format: uuid
      description:
        type: string
      location:
        type: string
        maxLength: 100
      company:
        type: string
        maxLength: 100
      profileReferenceId:
        type: string
        format: uuid
    required:
      - userId
      - description
      - location
  UpdateProfileRequest:
    type: object
    properties:
      description:
        type: string
      location:
        type: string
      profileReferenceId:
        type: string
        format: uuid
    required:
      - description
      - location
  Profile:
    type: object
    properties:
      id:
        type: string
        format: uuid
      userId:
        type: string
        format: uuid
      schoolId:
        type: string
        format: uuid
      photoId:
        type: string
        format: uuid
      photo:
        $ref: '#/definitions/Attachment'
      description:
        type: string
      location:
        type: string
      rate:
        type: number
      company:
        type: string
      profileReferenceId:
        type: string
        format: uuid
  ProfileProjection:
    type: object
    properties:
      id:
        type: string
        format: uuid
      description:
        type: string
      location:
        type: string
      rate:
        type: number
      company:
        type: string
      mentor:
        type: boolean
      photo:
        $ref: '#/definitions/Attachment'
      user:
        $ref: '#/definitions/User'
      school:
        $ref: '#/definitions/School'
      services:
        type: array
        items:
          $ref: '#/definitions/Service'
      interests:
        type: array
        items:
          $ref: '#/definitions/Interest'
      accomplishments:
        type: array
        items:
          $ref: '#/definitions/Accomplishment'
      experiences:
        type: array
        items:
          $ref: '#/definitions/Experience'
      attachments:
        type: array
        items:
          $ref: '#/definitions/ProfileAttachment'
      skills:
        type: array
        items:
          $ref: '#/definitions/ProfileSkill'
  ProfileProjectionResource:
      allOf:
        - $ref: '#/definitions/ProfileProjection'
        - type: object
          properties:
            _links:
              type: object
  ProfileResource:
      allOf:
        - $ref: '#/definitions/Profile'
        - type: object
          properties:
            _links:
              type: object
  ProfileResourceList:
    type: object
    properties:
      profileResourceList:
        type: array
        items:
          $ref: '#/definitions/ProfileResource'
  EmbeddedProfileResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/ProfileResourceList'
      _links:
        type: object
  ProfileProjectionResourceList:
    type: object
    properties:
      profileProjectionResourceList:
        type: array
        items:
          $ref: '#/definitions/ProfileProjectionResource'
  EmbeddedProfileProjectionResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/ProfileProjectionResourceList'
      _links:
        type: object
  CreateAvailabilityRequest:
    type: object
    properties:
      mentorProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
    required:
      - mentorProfileId
      - fromDateTime
      - toDateTime
  UpdateAvailabilityRequest:
    type: object
    properties:
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
    required:
      - fromDateTime
      - toDateTime
  Availability:
    type: object
    properties:
      id:
        type: string
        format: uuid
      mentorProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
  AvailabilityResource:
    allOf:
        - $ref: '#/definitions/Availability'
        - type: object
          properties:
            _links:
              type: object
  AvailabilityResourceList:
    type: object
    properties:
      availabilityResourceList:
        type: array
        items:
          $ref: '#/definitions/AvailabilityResource'
  EmbeddedAvailabilityResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/AvailabilityResourceList'
      _links:
        type: object
  CreateAppointmentRequest:
    type: object
    properties:
      mentorProfileId:
        type: string
        format: uuid
      menteeProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
      description:
        type: string
    required:
      - mentorProfileId
      - menteeProfileId
      - fromDateTime
      - toDateTime
      - description
  UpdateAppointmentRequest:
    type: object
    properties:
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
      description:
        type: string
    required:
      - fromDateTime
      - toDateTime
      - description
  Appointment:
    type: object
    properties:
      id:
        type: string
        format: uuid
      mentorProfileId:
        type: string
        format: uuid
      menteeProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
      description:
        type: string
      fee:
        type: number
      status:
        type: string
        enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED, MISSED, COMPLETED, STARTED, UNAVAILABLE]
      reason:
        type: string
  AppointmentProjection:
    type: object
    properties:
      id:
        type: string
        format: uuid
      mentorProfileId:
        type: string
        format: uuid
      menteeProfileId:
        type: string
        format: uuid
      fromDateTime:
        type: string
        format: date-time
      toDateTime:
        type: string
        format: date-time
      description:
        type: string
      fee:
        type: number
      status:
        type: string
        enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED, MISSED, COMPLETED, STARTED, UNAVAILABLE]
      reason:
        type: string
      mentorFirstName:
        type: string
      mentorLastName:
        type: string
      menteeFirstName:
        type: string
      menteeLastName:
        type: string
      mentorPhotoUrl:
        type: string
      menteePhotoUrl:
        type: string
      feedbacks:
        type: array
        items:
          $ref: '#/definitions/Feedback'
  AppointmentReason:
    type: object
    properties:
      reason:
        type: string
        maxLength: 255
  AppointmentProjectionResource:
    allOf:
        - $ref: '#/definitions/AppointmentProjection'
        - type: object
          properties:
            _links:
              type: object
  AppointmentResource:
    allOf:
        - $ref: '#/definitions/Appointment'
        - type: object
          properties:
            _links:
              type: object
  AppointmentResourceList:
    type: object
    properties:
      appointmentResourceList:
        type: array
        items:
          $ref: '#/definitions/AppointmentResource'
  EmbeddedAppointmentResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/AppointmentResourceList'
      _links:
        type: object
  EstimationResource:
    type: object
    properties:
      fee:
        type: number
  CreateFeedbackRequest:
    type: object
    properties:
      source:
        type: string
        enum: [MENTEE, MENTOR]
      rating:
        type: number
        minimum: 0
        maximum: 5
      description:
        type: string
    required:
      - source
      - rating
      - description
  Feedback:
    type: object
    properties:
      id:
        type: string
        format: uuid
      appointmentId:
        type: string
        format: uuid
      source:
        type: string
        enum: [MENTEE, MENTOR]
      rating:
        type: number
      description:
        type: string
  FeedbackResource:
    allOf:
        - $ref: '#/definitions/Feedback'
        - type: object
          properties:
            _links:
              type: object
  FeedbackResourceList:
    type: object
    properties:
      feedbackResourceList:
        type: array
        items:
          $ref: '#/definitions/FeedbackResource'
  EmbeddedFeedbackResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/FeedbackResourceList'
      _links:
        type: object
  ProfileAssociationRequest:
    type: object
    properties:
      schoolId:
        type: string
    required:
      - schoolId
  ApproveProfileAssociationRequest:
    type: object
    properties:
      rate:
        type: number
    required:
      - rate
  RejectProfileAssociationRequest:
    type: object
    properties:
      description:
        type: string
        maxLength: 255
    required:
      - rate
  ProfileAssociation:
    type: object
    properties:
      id:
        type: string
        format: uuid
      profileId:
        type: string
        format: uuid
      schoolId:
        type: string
        format: uuid
      status:
        type: string
        enum: [PENDING, APPROVED, REJECTED]
      description:
        type: string
  ProfileAssociationResource:
    allOf:
        - $ref: '#/definitions/ProfileAssociation'
        - type: object
          properties:
            _links:
              type: object
  ProfileAssociationResourceList:
    type: object
    properties:
      profileAssociationResourceList:
        type: array
        items:
          $ref: '#/definitions/ProfileAssociationResource'
  CreateExperienceRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 100
      institution:
        type: string
        maxLength: 100
      location:
        type: string
        maxLength: 255
      area:
        type: string
        maxLength: 100
      fromDate:
        type: string
        format: date
      toDate:
        type: string
        format: date
      description:
        type: string
      type:
        type: string
        enum: [PROFESSIONAL, EDUCATIONAL, VOLUNTEER]
    required:
      - title
      - institution
      - type
  UpdateExperienceRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 100
      institution:
        type: string
        maxLength: 100
      location:
        type: string
        maxLength: 255
      area:
        type: string
        maxLength: 100
      fromDate:
        type: string
        format: date
      toDate:
        type: string
        format: date
      description:
        type: string
    required:
      - title
      - institution
  Experience:
    type: object
    properties:
      id:
        type: string
        format: uuid
      profileId:
        type: string
        format: uuid
      title:
        type: string
        maxLength: 100
      institution:
        type: string
        maxLength: 100
      location:
        type: string
        maxLength: 255
      area:
        type: string
        maxLength: 100
      fromDate:
        type: string
        format: date
      toDate:
        type: string
        format: date
      description:
        type: string
      type:
        type: string
        enum: [PROFESSIONAL, EDUCATIONAL, VOLUNTEER]
  ExperienceResource:
    allOf:
        - $ref: '#/definitions/Experience'
        - type: object
          properties:
            _links:
              type: object
  ExperienceResourceList:
    type: object
    properties:
      experienceResourceList:
        type: array
        items:
          $ref: '#/definitions/ExperienceResource'
  CreateInterestRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 100
      description:
        type: string
    required:
      - title
      - description
  UpdateInterestRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 100
      description:
        type: string
    required:
      - title
      - description
  Interest:
    type: object
    properties:
      id:
        type: string
        format: uuid
      profileId:
        type: string
        format: uuid
      title:
        type: string
        maxLength: 100
      description:
        type: string
  InterestResource:
    allOf:
        - $ref: '#/definitions/Interest'
        - type: object
          properties:
            _links:
              type: object
  InterestResourceList:
    type: object
    properties:
      interestResourceList:
        type: array
        items:
          $ref: '#/definitions/InterestResource'
  CreateAccomplishmentRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 100
      description:
        type: string
      type:
        type: string
        enum: [PUBLICATION, CERTIFICATION, LANGUAGE, PROJECT, AWARD]
    required:
      - title
      - description
      - type
  UpdateAccomplishmentRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 100
      description:
        type: string
    required:
      - title
      - description
  Accomplishment:
    type: object
    properties:
      id:
        type: string
        format: uuid
      profileId:
        type: string
        format: uuid
      title:
        type: string
        maxLength: 100
      description:
        type: string
      type:
        type: string
        enum: [PUBLICATION, CERTIFICATION, LANGUAGE, PROJECT, AWARD]
  AccomplishmentResource:
    allOf:
        - $ref: '#/definitions/Accomplishment'
        - type: object
          properties:
            _links:
              type: object
  AccomplishmentResourceList:
    type: object
    properties:
      interestResourceList:
        type: array
        items:
          $ref: '#/definitions/AccomplishmentResource'
  CreateServiceRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 100
      description:
        type: string
    required:
      - title
      - description
  UpdateServiceRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 100
      description:
        type: string
    required:
      - title
      - description
  Service:
    type: object
    properties:
      id:
        type: string
        format: uuid
      profileId:
        type: string
        format: uuid
      title:
        type: string
        maxLength: 100
      description:
        type: string
  ServiceResource:
    allOf:
        - $ref: '#/definitions/Service'
        - type: object
          properties:
            _links:
              type: object
  ServiceResourceList:
    type: object
    properties:
      serviceResourceList:
        type: array
        items:
          $ref: '#/definitions/ServiceResource'
  UpdateAttachmentRequest:
    type: object
    properties:
      description:
        type: string
        maxLength: 100
    required:
      - description
  Attachment:
    type: object
    properties:
      id:
        type: string
        format: uuid
      description:
        type: string
        maxLength: 100
      url:
        type: string
        maxLength: 255
  AttachmentResource:
    allOf:
        - $ref: '#/definitions/Attachment'
        - type: object
          properties:
            _links:
              type: object
  AttachmentResourceList:
    type: object
    properties:
      serviceResourceList:
        type: array
        items:
          $ref: '#/definitions/AttachmentResource'
  EmbeddedAttachmentResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/AttachmentResourceList'
      _links:
        type: object
  UpdateAppointmentStatusRequest:
    type: object
    properties:
      reason:
        type: string
        maxLength: 255
      status:
        type: string
        enum: [PROPOSED, ACCEPTED, DECLINED, CANCELED, MISSED, COMPLETED, STARTED, UNAVAILABLE]
  CreateSkillRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 50
      description:
        type: string
        maxLength: 255
    required:
      - title
      - description
  UpdateSkillRequest:
    type: object
    properties:
      title:
        type: string
        maxLength: 50
      description:
        type: string
        maxLength: 255
    required:
      - title
      - description
  Skill:
    type: object
    properties:
      id:
        type: string
        format: uuid
      title:
        type: string
        maxLength: 50
      description:
        type: string
        maxLength: 255
  SkillResource:
    allOf:
        - $ref: '#/definitions/Skill'
        - type: object
          properties:
            _links:
              type: object
  SkillResourceList:
    type: object
    properties:
      skillResourceList:
        type: array
        items:
          $ref: '#/definitions/SkillResource'
  EmbeddedSkillResourceList:
    type: object
    properties:
      _embedded:
        $ref: '#/definitions/SkillResourceList'
      _links:
        type: object
  ProfileSkill:
    type: object
    properties:
      profileId:
        type: string
        format: uuid
      skillId:
        type: string
        format: uuid
      skill:
        $ref: '#/definitions/Skill'
  ProfileSkillResource:
    allOf:
        - $ref: '#/definitions/ProfileSkill'
        - type: object
          properties:
            _links:
              type: object
  ProfileAttachment:
    type: object
    properties:
      profileId:
        type: string
        format: uuid
      attachmentId:
        type: string
        format: uuid
      attachment:
        $ref: '#/definitions/Attachment'
